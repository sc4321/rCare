import requests
import subprocess  # For secure updates using Git
from datetime import datetime, timedelta  # For scheduling daily checks
import os
import shutil
import time


# Replace with your actual GitHub repository URL
repo_url = "https://api.github.com/sc4321/rCare/upload/main/production"
repo_cloning_url = "https://github.com/sc4321/rCare/upload/main/production.git"

# Cloned folder relative path
folder_to_delete = "../updated_project"


# Update check interval (in days)
update_interval = 1


def check_for_update():
    # Check if it's time for an update (based on interval)
    if datetime.utcnow() - timedelta(seconds=update_interval) >= datetime.utcnow():
        max_retries = 3  # Set the maximum number of retries for request.get
        for attempt in range(1, max_retries + 1):
            try:
                response = requests.get(repo_url + "/releases/latest")
                if response.status_code == 200:
                    latest_version_tag_name = response.json()["tag_name"]
                    with open("version.txt", "r+") as f:  # Open in read/write mode
                        ver = f.read()
                        try:
                            # Attempt to convert version number to float (handles decimals)
                            current_version = float(ver)
                            latest_version = float(latest_version_tag_name)
                        except ValueError:
                            # Handle non-numeric version formats (e.g., pre-release labels)
                            # todo write to github maybe?
                            #  print(f"Warning: Version format not recognized. Current: {ver},
                            #  Latest: {latest_version_tag_name}")
                            return  # Exit function if versions can't be compared numerically

                        if latest_version > current_version:
                            update_script()
                            f.seek(0)  # Move to the beginning of the file
                            f.write(latest_version_tag_name)  # Overwrite version with new tag
                            f.truncate()  # Remove extra characters

                            # Change permissions to 0o777 (full access for owner, group, and others)
                            change_permissions_recursive(folder_to_delete, 0o777)

                            # Use os.path.exists() to check if the folder exists before attempting to delete it
                            if os.path.exists(folder_to_delete):
                                # Use shutil.rmtree() to delete the folder and all of its contents recursively
                                shutil.rmtree(folder_to_delete)
                                print(f"Folder '{folder_to_delete}' and its contents deleted successfully.")
                            else:
                                print(f"Folder '{folder_to_delete}' does not exist.")

                    break  # Exit the loop on successful request
            except requests.exceptions.RequestException as e:
                print(f"Attempt {attempt}/{max_retries}: Error fetching update info: {e}")
                time.sleep(2 ** attempt)  # Exponential backoff between retries
        else:
            print("Failed to retrieve update information after retries.")

def update_script():
    # Clone the entire repository (including updates) with retry logic
    max_retries = 3  # Set the maximum number of retries for cloning
    for attempt in range(1, max_retries + 1):
        try:
            subprocess.run(["git", "clone", "--depth=1", repo_cloning_url, folder_to_delete])


            shutil.copytree(".", "./temp_Back")

            # Replace existing files with updated versions
            shutil.copy2("./updated_project/config.txt", ".")
            shutil.copy2("./updated_project/firebase-adminsdk-serviceAccount.json", ".")
            shutil.copy2("./updated_project/send_data_to_app_via_firebase.py", ".")
            shutil.copy2("./updated_project/main.py", ".")
            shutil.copy2("./updated_project/VideoClipsRecord.py", ".")
            shutil.copy2("./updated_project/updater.py", ".")
            shutil.copy2("./updated_project/version.txt", ".")

            # Optional: Restart functionality (consider platform-specific approaches)
            # subprocess.run(["python", "the_functionality.py"])  # Example for restarting

            print("Successfully updated project from GitHub!")
            break  # Exit the loop on successful cloning
        except subprocess.CalledProcessError as e:
            print(f"Attempt {attempt}/{max_retries}: Error cloning repository: {e}")
            time.sleep(2 ** attempt)  # Exponential backoff between retries
    else:
        print("Failed to clone the updated project after retries.")


# Change permissions recursively for the folder and its contents
def change_permissions_recursive(path, mode):
    for root, dirs, files in os.walk(path):
        for dir in dirs:
            os.chmod(os.path.join(root, dir), mode)
        for file in files:
            os.chmod(os.path.join(root, file), mode)


if __name__ == "__main__":
    check_for_update()
